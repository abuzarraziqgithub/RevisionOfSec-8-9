"use strict";

// IMMEDIATELY INVOKED FUNCTION EXPRESSION:

/* GENERAL EXPLANATION:

-> THE IIFE'S ARE FUNCTIONS THAT DISAPPEARS RIGHT AFTER IT'S CALLED ONCE.
-> WE WRAP UP THE FUNCTION WITH OPEN PARENTHESIS BECAUSE THE JS WILL TREATE IT AS AN EXPRESSION AND THEN WE CAN ALSO CALL IT.

-> THE THING IS WHY IS IIFE INVENTED, WHAT IS THE PURPOSE OF IIFE?
-> WELL WE KNOW THAT THERE ARE SCOPES , AND ALSO THE FUNCTIONS SCOPE WHERE THE PARENT DOESN'T HAVE ACCESS TO ITS CHILD VARIABLES .
-> WE DON'T HAVE ACCESS TO FUNCTION SCOPE AND ASLO BLOCK SCOPE VARIABES OUTSIDE THAT SCOPE BECAUSE OF THE SCOPE CHAINING OR LEXICAL SCOPE CHAINING.

-> THEREFORE , WE CAN SAY THAT ALL DATA THAT IS DEFINED INSIDE A SCOPE IS PRIVATE , OR ENCAPSULATED.

-> DATA ENCAPSULATION AND DATA PRIVACY ARE EXTREMEMLY IMPORTANT CONCEPTS IN JAVASCRIPT.

-> THAT'S IMPORTANT TO HIDE VARIABLES . AND SCOPES ARE GOOD TOOL FOR DOING THIS.

-> THIS IS ALSO THE REASON WHY IIFE WERE INVENTED.

-> BECAUSE IT ENCAPSULATES THE DATA INSIDE WE DEFINE IT , AND WE CAN CALL IT ONLY ONCE , SO THEN NO ONE CAN HAVE ACCESS TO IT .
-> THERE ARE SOME REAL WORLD APPLICATION THAT USES THIS CONCEPT , WE HAVE SOME DATA SHOWN AND THAT DATA NEVERS COME BACK AGAIN BECAUSE IT CALLED ONCE.

// SO NOW THE IIFE ARE NOT THAT USED ANYMORE, BECAUSE WE CAN DEFINE PRIVATE DATA INSIDE BLOCK.

-> WE CAN STILL USE IT , IF WE WANT TO CALL A FUNCTION ONLY AT ONCE.
*/

// SIMPLE FUNCTION:
const runOnce = function () {
  console.log(`THIS SIMPLE FUNCTION WILL NEVER RUN AGAIN`);
};
runOnce();

// LET'S CREATE A FUNCTION EXPRESSION HERE:
(function () {
  console.log(`THIS EXPRESSION OR IIFE WILL NEVER RUN AGAIN`);
})();

// SAME FOR THE ARROW FUNCTIONS:
(() => console.log(`This IIFE ARROW FUNCTION WILL NOT RUN AGAIN!`))();

//
