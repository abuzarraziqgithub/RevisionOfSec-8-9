"use strict";
// DESTRUCTURING OBJECTS:

/* GENERAL EXPLANATION:

-> WE USED CLOSED BRACES FOR ARRAYS VARIABLES IN ORDER TO STORE THE VALUES OF ARRAY.

-> FOR THE DESTRUCTURING OF OBJECTS , WE USE CURLY BRACES AND THAT IS HOW WE CAN CREATE OBJECTS AS WELL.

-> WE SHOULD USE THE EXACT PROPERTY NAME TO EXTRACT VRAIBLES FROM AN OBJECT.
const number = {
  number1: 1,
  number2: 2,
  number3: 3,
};

const { number1, number2, number3 } = number;

console.log(number1, number2, number3);

-> DESTRUCTURING OF OBJECTS IS EXTREMELY USEFUL ADDITION TO THE LANGUAGE .
-> WHEN WE DEAL  WITH RESULT OF AN API (MEANS TO GET DATA FROM ANOTHER WEB APPLICATION).
-> THIS DATA USUALLY COMES IN THE FORM OF OBJECTS , SO IT WILL HELP TO WRITE LESS CODE FOR IT.

-> IF WE WANT DIFFERENT NAME FOR THE PROPERTY IN THE OBJECTS , WE CAN SIMPLY DO IT LIKE THIS:

const {number1 : num1 , number2: num2 ,number3: num3} = numbers;

-> IT IS ALSO HELPFUL WHEN WE USE THIRD PARTY WEB APP FOR AN API CALL , WE CAN SET A DEFAULT VALUE FOR THE NEWLY VARIABLE OR PROPERTY NAME IN THE CASE IT DOESN'T EXIST.

-> WE CAN MUTATE VARIABLES AS WE DID IT FOR ARRAYS.
CODE :
let a = 1;
let b = 2;
const obj = { a : 23 , b : 7 , c : 14 };

{ a , b } = obj; WE CAN'T DO IT LIKE THTS , THE JS WILL CONSIDER IT A BLOCK SCOPE CODE , SO WE CAN WRAP UP IT INTO OPEN PARENTHESIS.
({ a , b } = obj)

-> IT OVERRIDE a , b INITIAL VALUES INTO OBJE VALUES


-> WE CAN DO THE SAME LIKE NESTED ARRAYS FOR NESTED OBJECTS.

const { fri : {open: 0 , close: c}} = openingHours.
*/

/*

#

*/

/* SUMMARY:

-> WE USE DESTRUCTURING FOR OBJECTS IN ORDER TO UNPACK OR EXTRACT THE VALUES OF OBJECTS PROPERTIES.

-> WE SHOULD USE THE EXACT PROPERTY NAME FOR THE VARIABLES OTHERWISE IT WILL BE UNDEFINED.

-> WE CAN USE DIFFERENT NAME FOR THE OBJECT PROPERTY BY A RULE.

-> WE CAN MUTATE VARIABLES IN OBJ DESTRU.

-> 
*/
