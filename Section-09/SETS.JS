"use strict";
// SETS AND MAPS:

// SETS:
/* GENERAL EXPLANATION: SETS

-> IN THE PAST WE HAD ONLY 2 DATA STRUCTURS WHICH ARE ARRAYS(ORDERED) AND OBJECTS.

-> BUT NOW IN ES6 , WE HAVE 2 MORE DATA STRUCTURES WHICH ARE SETS AND MAPS.

-> SET IS THE COLLECTION OF UNIQUE VALUES.
-> SETS CANNOT BE DUPLICATED BECAUSE IT HAS UNIQUE VALUES.

-> SET IS DEFINE USING THE NEW KEYWORD.
-> SET IS ALSO ITERABLE , SO WE CAN LOOP OVER IT.
-> SET ARE LIKE ARRAYS , BEACUSE IT DOESN'T HAVE ANY KEYS FOR VALUES.
-> THE ORDER OF ELEMENTS INSIDE THE SET IS IRRELEVANT / DOESN,T MATTER.

-> SO THE ORDER OF ELEMENTS IN THE SET DOESN'T REALLY MATTER , THAT'S WE CANNOT GET AN ELEMENT OUT OF SET LIKE WE DO IN ARRAYS.

-> WE DON'T NEED TO GET AN ELEMENT OUT OF SET , BECAUSE IT THERE ALL VALUES ARE UNIQUE.

-> WE CAN USE THE SPREAD OPERATOR , AND CAN MAKE AN ARRAY OF UNIQUE VALUS SEPARATED BY COMMAS.

-> SETS ARE NOT INTENDED TO REPLACE ARRAYS AT ALL.

-> WHENEVER WE NEED TO STORE VALUES IN ORDER AND THAT MIGHT CONTAIN DUPLICATES , ALWAYS USE ARRAYS.

-> SET HAS A VERY USEFUL PROPERTY OF BEING UNIQUE.
*/

const orderSet = new Set([
  "Pizza",
  "Polau",
  "Biscuit",
  "Pasta",
  "Pasta",
  "Risotto",
]);
console.log(orderSet);

console.log(new Set("Abuzar RaziQ"));

// WE CAN CHECK THE SIZE OF SET:
console.log(orderSet.size); //5

// WE CAN CHECK IF THE ELEMENT IS PRESENT OR NOT :
console.log(orderSet.has("Garlic Bread")); // false

// WE CAN ADD AND DELETE ELEMENTS:
orderSet.add("Garlic Bread");
orderSet.delete("Pasta");
console.log(orderSet);

// LOOPING:
for (const items of orderSet) {
  console.log(items);
}

// MAKING AN ARRAY USING SPREAD OPERATOR:
const orderSetArr = [...new Set(orderSet)];
console.log(orderSetArr);

/* SUMMARY: SETS

-> SET IS THE ADVANCE JS DATA STRUCTURE.
-> SET IS THE COLLECTION OF UNIQUE VALUES.
-> THE ORDER OF SET IS IRRELEVANT.
-> WE CAN'T GET AN ELEMENT OUT OF SET.
-> WE CAN USE THE SPREAD OPERATOR AND MAKE AN ARRAY OF THESE VALUES.
-> SET HAS VERY UNIQUE PROPERTY OF BEING UNIQUE.

*/
