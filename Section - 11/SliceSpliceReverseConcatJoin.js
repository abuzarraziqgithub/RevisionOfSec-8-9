"use strict";

/* GENERAL EXPLANATION:

-> THERE ARE A BUNCH OF ARRAY METHODS IN JAVASCRIPT.
-> WE HAVE DISCUSSED SOME USEFUL AND IMPORTANT ARRAY METHODS.


-> STARTING WITH SLICE METHOD:
-> IT RETURNS THE COPY OF THE ORIGINAL ARRAY AND DOESN'T MUTATE THE ORIGINAL ARRAY AT ALL.
-> IT CUT AND LEAVE THE ARRAY ELEMENTS ACCORDING TO THE GIVEN INPUT.
-> WE CAN CREATE A SHALLOW COPY OF ARRAY USING SLICE METHOD.
-> WE CAN ALSO USE THE SPREAD OPERATOR FOR IT.

-> SPLICE METHOD:
-> SPLICE METHOD RETURNS AND MUTATE THE ORIGINAL ARRAY.
-> IT'S A BIT SAME AS THE SLICE METHOD.


-> REVERSE METHOD:
-> IT REVERSE THE ARRAY ELEMETS AND RETURNS THE COPY OF THAT ARRAY AND DOESN'T MUTATE THE ORIGINAL ARRAY. 

-> CONCAT METHOD:
-> IT CONCATINATE ONE ARRAY WITH ANOTHER.
-> IT RETURNS THE COPY OF ORIGINAL ARRAY AND DOESN;T MUTATE THE ORIGINAL ONE.
-> WE CAN ALSO USE THE SPREAD OPERATOR FOR IT.


-> JOIN METHOD:
-> IT JOIN EVERY ELEMENTS IN THE ARRAY WITH THE GIVEN INPUT.
-> IT CREATES COPY OF ORIGINAL ARRAY AND DOESN'T MUTATE THE ORIGINAL ONE.


-> THE NEW AT METHOD:
-> THE AT METHOD IS INTRODUCED IN ES2022.
-> WE CAN CHECK OR GET THE ELEMENT OF AN ARRAY BY GIVING THE INDEX OF IT.
-> WE CAN ALSO FIND THE LAST ELEMET OF ARRAY.
-> console.log(arr.at(-1))
-> IT DOESN'T MUTATE THE ORIGINAL ARRAY.
-> IT IS ALSO USED FOR STRINGS.

*/

// SLICE METHOD:
let arr = ["a", "b", "c", "d", "e", "f", "g"];
console.log(arr.slice(2)); // ['c','d','e','f','g']  // CUT THE FIRST TWO ELEMENTS OF THE ARRAY.
console.log(arr.slice(2, 4)); // ['c','d'] // CUT THE FIRST TWO ELEMENTS AND THE LAST 4 ELEMENTS.
console.log(arr.slice(-2)); // ['f','g']
console.log(arr.slice(-1)); // ['g']
console.log(arr.slice(1, -2)); // ['b','c','d','e']
// WE CAN CREATE A SHALLOW COPY OF ORIGINAL ARRAY:
console.log(arr.slice());
// WE CAN ALSO USE THE SPREAD OPERATOR TO CREATE A COPY OF THE ORIGINAL ARRAY.
console.log([...arr]);

// SPLICE METHOD:
console.log(arr.splice(2)); // CUT THE FIRST TWO ELEMENTS
console.log(arr.splice(1, 2)); // PICK 1ST AND 2ND ELEMENT.
