"use strict";

/* GENERAL EXPLANATION:

-> HOISTING TAKES PLACE IN THE VARIABLE ENVIROMENT OF EXECUTION CONTEXT.

-> HOISTING IS THE CONCEPT IN WHICH SOME TYPES OF VARIABLES CAN BE ACCESSIBLE OR USABLE IN THE CODE BEFORE THEY ARE ACTUALLY DECLARED.

-> THERE IS A CONCEPT THAT , " VARIABLES ARE LIFTED TO THE TOP OF THIER SCOPE." 
-> IT MEANS THAT VARIABLES AND FUNCTION DECLARATIONS ARE MOVED TO THE TOP OF THIER CONTAINING SCOPE DURING COMPILATION OR CREATION PHASE.


-> ACCORDING TO PROFESSIONAL DEVELOPERS , BEFORE EXECUTIION , CODE IS SCANNED FOR VARIABLE DECLARATIONS AND FOR EACH VARIABLE , A NEW PROPERTY IS CREATED IN THE VARIABLE ENVIROMENT OBJECT.

-> HOISTING ONLY WORKS FOR VARIABLE DECLARED WITH VAR (IT WILL BE UNDEFINED) AND THE FUNCTION DECLARATION(IT WILL WORK)
*/

/*

#

*/

/* HOISTING FOR DIFFERENT DECLARATIONS:

-> DECLARATIVE FUNCTION CAN BE HOISTED AND THE IT'S INITIAL VALUE WILL BE THE ACTUAL FUNCTION.

-> VARIABLES DECLARED WITH VAR(LOCAL SCOPE) CAN BE HOISTED BUT THE INITIAL VALUE WILL BE UNDEFINED , WE CAN REASSIGN VALUE AT THE TOP.

-> VARIABLES DECALRED WITH CONST AND LET CAN'T BE HOISTED AND IT WILL GIVE A MESSAGE 'Cannot access 'VARIABLE' before initialization' .
-> THE LET AND CONST VARIABLES WILL CREATE A TEMPORAL DEAD ZONE WHEN  TRY TO ACCESS IT BEFORE DEC OR INITIALIZATION.
-> THE TEMPORAL DEAD ZONE(TDZ) IS A CONCEPT IN HOISTING , WHICH MEANS THE SPACE BETWEEN VARIABLE DECALARATION AND THE REGION OF ACCESS BEFORE THE VARIABLE SCOPE IS CONSIDERED AS TEMPORAL DEAD ZONE(TDZ)
-> IN SIMPLE , THE TDZ STARTS FROM THE FIRST LINE OF SCOPE AND ENDS TO THAT VARIABLE WHERE ACTUALLY IS INITIALIZED.

-> EXPRESSION FUNCTIONS AND ARROW FUNCTIONS DEPENDS ON HOW THEY ARE DECLARED , EITHER WITH CONST , LET OR VAR.
-> IF IT DECALRED WITH VAR , IT IS SAME AS THE VARIABLE DECLARED WITH VAR WHICH WILL GIVE UNDEFINED AND FOR CONST AND LET , IT IS TDZ.

*/

/*

#

*/

/* WHY WE SHOULD NEVER USE VAR MOST OF THE TIME:

CODE 1 :

if (!numProducts) deleteShoppingCart();

var numProducts = 10;

function deleteShoppingCart() {
  console.log("All Products deleted.");
}

-> THE FUNCTION WILL CALLED DUE TO THE CONDITION.
-> THE CONDITION SAYS , IF NOT numProducts , THEN CALL THE FUNCTION.

-> THE CONCEPT HERE IS , IF THERE IS NO PRODUCTS AVAILABLE THEN DELETE THE SHOPPING CART.
-> BUT WE HAVE 10 PRODUCTS DEFINED , BUT DUE TO HOISTING , THE VARIABLE  IS UNDEFINED AND SO IT CALLED THE FUNCTION.

CODE 2 :

 var x = 10;
 let y = 2;
 const z = 3;


 console.log(x=== window.x) // true
 console.log(y=== window.y) // false
 console.log(z=== window.z) // false

-> WINDOW IS A GLOBAL OBJECT AND IT ALSO CREATE A PROPERTY FOR VARIABLES DECLARED WITH VAR.
*/

/*

#

*/

/* SUMMARY :

-> HOISTING IS THE CONCEPT IN WHICH WE CAN ACCESS AND USE VARIABLES BEFORE THIER DECLARATION.

-> THERE ARE TWO CONCEPTS : "VARIABLES ARE LIFTED TO THE TOP OF THE SCOPE DURING COMPILATION".

-> THE OTHER CONCEPT IS , BEFORE EXECUTION , THE CODE IS SCANNED FOR VARIABLE DECLARATIONS AND FOR EACH VARIABLE , A NEW PROPERTY IS CREATED IN THE VARIABLE ENVIROMENT.

-> THE INITIAL VALUE WILL BE UNDEFINED FOR A VARIABLE DECLARED WITH VAR.

-> THE INITIAL VALUE WILL BE THE FUNCTION FOR DECLARATIVE FUNCTION.

-> FOR THE CONST AND LET , THE TEMPORAL DEAD ZONE WILL BE CREATED AND IT STARTS FROM THE FIRST LINE OF THE SCOPE AND ENDS TO THAT VARIABLE WHERE IT ACTUALLY IS INITIALIZED.

-> FUNCTION EXPRESSION AND ARROW FUNCTIONS WORKS THE SAME AS WE DECLARED IT WITH VAR LET OR CONST. IT WILL BE UNDEFINED FOR VAR AND FOR LET AND CONST, IT WILL BE IN THE TDZ.

*/
